{{!--Code based on https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%208%20-%20Dynamically%20Updating%20Data--}}
{{!--Changes were made to meet the specifications of our entities--}}

<!-- index.hbs -->

{{!--
    Citation for the following image and links:
    Date: 02/25/2024 (link) 3/14/2024(image)

# Citation for Company logo
# Date: 3/14.2024
# Copied From
# 0 % originality (ai generated so we typed the prompt)
# Source URL: https://www.canva.com/ai-image-generator/  

# Link Citation (got from starter code)
# Date: 2/16/2024
# Based on 
# 20% originality we changed the links to reference our other pages respectively
# Source Url: https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%208%20-%20Dynamically%20Updating%20Data

--}}
<h1><img src="img/Untitled Project.jpg" alt="Company Logo" width="200" height="50"></h1>

<link rel="stylesheet" href="css/pagestyle.css">

<p id="references">
[<a href="/">Home</a> | <a href="/customers">Customers</a> | <a href="/deliveries">Deliveries</a> | <a href="/employees">Employees</a> | <a href="/purchases">Purchases</a>| <a href="/transportvehicles">Transport Vehicles</a> | <a href="/employeetransportvehicles">Employeetransportvehicles</a>]
</p>

{{!--
    Citation for the following function:
    Date: 02/25/2024
    The following code was adapted from the nodejs starter app code  from :https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%204%20-%20Dynamically%20Displaying%20Data and https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%207%20-%20Dynamically%20Deleting%20Data

    This code was adapted from the two sources to use the data from the Customer entity to create a table of the data and to add a delete key to allow the user to delete a customer
--}}

<h2>Customers</h2>

{{!-- Create a table --}}
<table id="customer-table">
    {{!-- Header Section--}}
    <thead>
        <tr>
            {{#each data.[0]}}
            <th>
                {{@key}}
            </th>
            {{/each}}
        </tr>
    </thead>

    {{!-- Body Section--}}
        <tbody>
        {{#each data}}
        <tr data-value = {{this.customer_id}}>
            <td>{{this.customer_id}}</td>
            <td>{{this.customer_name}}</td>
            <td>{{this.phone_number}}</td>
            <td>{{this.email}}</td>
            <td><button onclick="deletecustomer({{this.customer_id}})">Delete</button></td>
        </tr>
        {{/each}}
    </tbody>
</table>
<script src="./js/delete_customer.js"></script>
{{!--
    end of Citation
--}}

{{!--
    Citation for the following function:
    Date: 02/25/2024
    The following code was adapted from the nodejs starter app code  from :https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%205%20-%20Adding%20New%20Data

    This code was adapted from the source to allow the user to add a Customer entry. The Major changes to the code were editing the form to use input data that would actually be used in the customer class.
--}}

{{!--Form to add a Customer to the table--}}
<h2>Add a customer to the table</h2>
<p>To add a new Customer, please enter their information below and click 'Submit'!</p>
<form id="add-customer-form-ajax" >
    <label for="input-customer_name">Customer Name:</label>
    <input type="text" name="input-customer_name" id="input-customer_name"> 

    <label for="input-phone_number">Phone number:</label>
    <input type="text" name="input-phone_number" id="input-phone_number"> 

    <label for="input-email">E-mail:</label>
    <input type="text" name="input-email" id="input-email"> 

    <input type="submit">
</form>
<script src="./js/add_customer.js"></script>
{{!--
    end of Citation
--}}

{{!--
    Citation for the following function:
    Date: 02/25/2024
    The following code was adapted from the nodejs starter app code  from :https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%208%20-%20Dynamically%20Updating%20Data and https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%206%20-%20Dynamically%20Filling%20Dropdowns%20and%20Adding%20a%20Search%20Box
    This code was adapted from the source to allow the user to update a Customer entry. The Major changes to the code were choosing the data that would be updatable and making the customer_ID have a dynamic dropdown bar
--}}
<h2>Update a Customer</h2>
<form id="update-customer-form-ajax">

    <label for="input-customer_id">Customer ID: </label>
    <select name="input-customer_id" id="mySelect">
        <option>Select the Customer ID you want to update</option>
        {{#each data}}
        <option value="{{this.customer_id}}">{{this.customer_id}}</option>
        {{/each}}
    </select>


    <label for="input-email">E-mail</label>
    <input type="text" name="input-email" id="input-email-update"> 

    <input type="submit">

</form>
<script src="./js/update_customer.js"></script>
{{!--
    end of Citation
--}}


{{!--
    Citation for the following function:
    Date: 02/25/2024
    The following code was adapted from the nodejs starter app code  from :https://github.com/osu-cs340-ecampus/nodejs-starter-app/tree/main/Step%206%20-%20Dynamically%20Filling%20Dropdowns%20and%20Adding%20a%20Search%20Box
    This code was adapted from the source to allow the user to search a Customer entry. The Major changes to the code was using the customer name to be searched.
--}}
<h2>Search for a Customer</h2>
<p>Search by name using the field below. Complete names only.</p>
<form id="search-customer-html" method='GET' action='/customers'>

    <label for="input-customername">Search by Name: </label>
    <input type="text" name="customername" id="input-customername-html-search">
    
    <input type="submit">
    <a href='/customers'><button>Reset</button></a>
</form>
{{!--
    end of Citation
--}}

